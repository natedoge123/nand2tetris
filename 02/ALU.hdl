// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
Implementation: Manipulates the x and y inputs
and operates on the resulting values, as follows:
if (zx == 1) sets x = 0        // 16-bit constant
if (nx == 1) sets x = !x       // bitwise not
if (zy == 1) sets y = 0        // 16-bit constant
if (ny == 1) sets y = !y       // bitwise not
if (f == 1)  sets out = x + y  // integer 2's complement addition
if (f == 0)  sets out = x & y  // bitwise and
if (no == 1) sets out = !out   // bitwise not
 */
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //All Possible x operations
    Not16(in=x, out=notx);
    And16(a=x, b=notx, out=zerox);
    Not16(in=zerox, out=notZerox);

    Mux4Way16(a=x, b=zerox, c=notx, d=notZerox,  sel[0]=zx, sel[1]=nx, out=xPrime);

    //All Possible y operations
    Not16(in=y, out=noty);
    And16(a=y, b=noty, out=zeroy);
    Not16(in=zeroy, out=notZeroy);

    Mux4Way16(a=y, b=zeroy, c=noty, d=notZeroy,  sel[0]=zy, sel[1]=ny, out=yPrime);

    //xy operations
    Add16(a=xPrime, b=yPrime, out=addXY);
    And16(a=xPrime, b=yPrime, out=andXY);

    Not16(in=addXY, out=negAddXY);
    Not16(in=andXY, out=negAndXY);

    Mux4Way16(a=andXY, b=addXY, c=negAndXY, d=negAddXY, sel[0]=f, sel[1]=no, out[0..7]=tempOut1, out[8..15]=tempOut2, out[15]=negative, out=out);
    
    // Check if zero, or all the bits together and if a 1 comes out then it in non zero so you flip the out to get what you want
    Or8Way(in=tempOut1, out=w1);
    Or8Way(in=tempOut2, out=w2);
    Or(a=w1, b=w2, out=w3);
    Not(in=w3, out=immad);
    Not(in=w3, out=zr);

    // Check if greater in zero
    And(a=negative, b=true, out=ng);



    




}
